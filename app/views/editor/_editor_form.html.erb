<%= render :partial => 'shared/modal', :locals => {:id => "file_save_modal", :title => "Your file is being saved", :message => "Press escape to close this window. (Your file will still be saved)"} %>
<%= render :partial => 'shared/modal', :locals => {:id => "clearance_wait_modal", :title => "Waiting for your preferences to be saved.", :message => "This should take a few seconds. You can skip this step if you're too impatient.", :buttons => {'skip_clearance' => "Skip"}} %>
<%= render 'file_info' %>

<div style="position:absolute;right:5px;top:5px;">
  <%= render 'shared/skyscraper_ad' %>
</div>

<div class="g_file_menu" <%= "style=display:none;" if show_minimized?(@file) %>>

  <%= form_for @file, :remote=> true, :html => {:class => :editor_form, :multipart => true} do |f| %>
    
    <%= f.hidden_field :id %>
    <%= f.hidden_field :folder_id %>
    <%= f.hidden_field :content %>
      
      
  <div class="panel panel-default">
    <div class="panel-heading">
      
  	<%= render 'editor_menu' %>
   
    

    </div>
    
    <div class="panel-body">
    
   	  
      <div class="file_title input-group">
        
        <%= f.text_field :title, :onkeydown=>"if(event.keyCode == 13){validate_file_size_and_submit();return false;}" , :class=> "field form-control", :placeholder => "File title" %>
        <span class="input-group-btn ">
          <%= link_to "Save", "#", :class => "editor_save_button btn btn-primary"%>
        </span>
      </div>
      <div class="input-group ">
        <%= f.label "Save as new revision", :class => "form-control", :for => "g_file_new_revision" %>
        <span class="input-group-addon">
          <%= f.check_box :new_revision %>
        </span>
      </div>
    </div>
  </div>

  <div id="editor_errors">
    <%= render 'shared/error_messages', :object => f.object %>
  </div>
  
  <% end %>

  <div id="editor_flash">
    <%= render 'shared/flash', :flash => flash %>
  </div>
  
  <div class="g_file_editor_file_explorer">
    <%= render 'shared/file_explorer', :with_dropdown => true %>
  </div>
  
  <%= render 'shared/editor_message' %>

</div>

<div class="small_g_file_menu" <%= "style=display:none;" if not show_minimized?(@file) %>>
  <span class="glyphicon glyphicon-floppy-save" onclick="javascript:validate_file_size_and_submit()" title="Save"></span>
  <span class="glyphicon glyphicon-folder-open" onclick="javascript:show_file_explorer()" title="Open file"></span>
  <span class="glyphicon glyphicon-log-in" onclick="javascript:open_menu(true)" title="Maximize menu"></span>
</div>

<div class="g_file_editor">
  
  <div id="editor"><%= @file.content %></div>

</div>

<script type="text/javascript">
    jQuery(function($) {
      $(".editor_form").bind("ajax:error",  function(){
        $("#file_save_modal").modal('hide')
        allow_saving()
        alert("A fatal error occured when saving your file. Please try again or refresh the page (don't forget you'll lose your changes ;-) )")
      });
        
    });

    var EDITOR_W_MENU_METRICS = {top:"0", bottom:"0", left:"280px", right:"130px"}
    var EDITOR_FULL_METRICS = {top:"0", bottom:"0", left:"30px", right:"130px"}
    
    var editor = ace.edit("editor");
    var syntax = "<%= @file.syntax.ace_js_mode %>"
    var file_id = "<%= @file.id %>"
    var ajax_defered_waiting = {}
    var skip_clearance = false
    var clearance_interval = null
    var content_saved = ""
    var safe_to_quit = true
    var word_wrap_enabled = <%= @preferences.get_preference('word_wrap') %>;
    var cache_file_explorer_enabled = <%= @preferences.get_preference('cache_file_explorer_enabled') %>;
    
    function reset_options(){
      skip_clearance = false
      allow_saving()
    }
  
    function initialize(){
      $('#skip_clearance').click(function(){skip_clearance = true})
      
      $(".syntax_button").click(function(){set_ace_mode($(this).attr('mode'))})
      $(".font_size_button").click(function(){change_font_size($(this).attr('value'))})
      $(".tab_size_button").click(function(){change_tab_size($(this).attr('value'))})
      
      $(".show_file_info").click(function(){
        $('#file_info_modal').modal('show')
      })
      
      allow_saving()
      remember_content()
      setInterval(check_content_changed, 1000)
    
      <% if show_minimized?(@file) %>
        INITIAL_METRICS = EDITOR_FULL_METRICS
      <% else %>
        INITIAL_METRICS = EDITOR_W_MENU_METRICS
      <% end %>
      
      $.each( INITIAL_METRICS , function( prop, value ) {
        $('#editor').css(prop,value)
      });
      
      editor.getSession().setMode("ace/mode/<%= @file.syntax.ace_js_mode %>");
      
      
      $(window).bind('beforeunload',function(){
        if(!safe_to_quit || editor.getValue() != content_saved){
          return "You have unsaved changes or your file is still being saved. You will lose your changes"
        }
        if(!ready_to_submit() && !skip_clearance){
          clearance_interval = setInterval(function(){wait_for_clearance(function(){location.reload()})}, 1000)
          return "Some of your preferences are still being saved. Press 'Don't reload' to wait for them to be saved.";
        }
      });
      
      <% unless @preferences.get_preference('ace_js_font_size').nil? %>
        editor.setFontSize("<%= @preferences.get_preference('ace_js_font_size') %>")
        $('#font_check').show()
        var check = $('#font_check').detach()
        $(document.getElementById("font_<%= @preferences.get_preference('ace_js_font_size') %>")).prepend(check)
      <% end %>
          
      <% unless @preferences.get_preference('ace_js_tab_size').nil? %>
        editor.getSession().setTabSize("<%= @preferences.get_preference('ace_js_tab_size') %>")
        $('#tab_check').show()
        var check = $('#tab_check').detach()
        $(document.getElementById("tab_<%= @preferences.get_preference('ace_js_tab_size') %>")).append(check)
      <% end %>
          
      editor.getSession().setUseWrapMode(word_wrap_enabled)
      if(word_wrap_enabled){
        $('#word_wrap_check').show()
      }
      
      if(cache_file_explorer_enabled){
        $('#cache_file_explorer_check').show()
      }
      
      window.addEventListener("keydown",function (e) {
          if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) { 
              e.preventDefault();
              editor.execCommand("find")
          }
      })
      
    }
    
    initialize()
    
    function set_ace_mode(mode){
      syntax = mode
      var check = $('#syntax_check').detach();
      $('#syntax_'+mode).prepend(check)
      editor.getSession().setMode("ace/mode/"+mode);
      if(file_id != ""){
        ajax_defered_waiting['set_ace_mode'] = true
        $.ajax(
          {
            url: '/preferences/get_update?syntaxes[<%= @file.extension %>]='+syntax,
            statusCode: {
          	 403: function(data){
          	   ajax_defered_waiting['set_ace_mode'] = false
          	   show_reauth()
          	 },
          	 200: function(data){
          	   ajax_defered_waiting['set_ace_mode'] = false
          	 }
            }	
          }
        )
      }
    }
    
    function ready_to_submit(){
      for(key in ajax_defered_waiting){
        if(ajax_defered_waiting[key]){
          return false
        }
        
      }
      return true
    }
    
    
    
    function wait_for_clearance(after){
      if(ready_to_submit() || skip_clearance){
        clearInterval(clearance_interval)
        $('#clearance_wait_modal').modal('hide')
        after()
      }
      else{
        $('#clearance_wait_modal').modal('show')
      }
    }
    
    function validate_file_size_and_submit(){
      var length = editor.getValue().length
      if (length > <%= @file.MAX_FILE_SIZE %>){
        alert("File won't be saved. Sorry :( our infrastructure is not badass enough for files that big.")
      }
      else{
        if(ready_to_submit() || skip_clearance){
          block_saving()
          remember_content()
          $('#g_file_content').val(editor.getValue())
          $('.editor_form').submit()
          $('#file_save_modal').modal('show')
        }
        else{
          wait_for_clearance(validate_file_size_and_submit)
          clearance_interval = setInterval(function(){wait_for_clearance(validate_file_size_and_submit)}, 1000)
        }
      }
      return false;
    }
    
    
    function change_font_size(font_size){
      ajax_defered_waiting['change_font_size'] = true
      editor.setFontSize(font_size)
      $('#font_check').show()
      var check = $('#font_check').detach()
      $(document.getElementById("font_"+font_size)).prepend(check)
      
      $.ajax(
        {
          url: '/preferences/get_update?ace_js_font_size='+font_size,
          statusCode: {
            403: function(data){
              ajax_defered_waiting['change_font_size'] = false
              show_reauth()
            },
            200: function(data){
              ajax_defered_waiting['change_font_size'] = false
            }
          }
        })
      
    }
      
    function change_tab_size(tab_size){
      ajax_defered_waiting['change_tab_size'] = true 
      editor.getSession().setTabSize(tab_size)
      
      $('#tab_check').show()
      var check = $('#tab_check').detach()
      $(document.getElementById("tab_"+tab_size)).append(check)
      
      $.ajax(
        {
          url: '/preferences/get_update?ace_js_tab_size='+tab_size,
          statusCode: {
            403: function(data){
              ajax_defered_waiting['change_tab_size'] = false
              show_reauth()
            },
            200: function(data){
              ajax_defered_waiting['change_tab_size'] = false
            }
          }
        })      
    }
    
    function block_saving(){
      $('.editor_save_button').html("Saving...")
      $('.editor_save_button').unbind('click')
      safe_to_quit = false
	    $(window).off('keydown.save')
      $(window).on('keydown.stop_save', function(event) {
        if (!( String.fromCharCode(event.which).toLowerCase() == 's' && event.ctrlKey) && !(event.which == 19)) return true;
        //alert("This file is already being saved. Calm down.")
        event.preventDefault();
        return false;
      });
    }
    
    function allow_saving(){
      $('.editor_save_button').html("Save")
      $('.editor_save_button').click(validate_file_size_and_submit)
      safe_to_quit = true
      $(window).off('keydown.stop_save')
      $(window).on('keydown.save', function(event) {
        if (!( String.fromCharCode(event.which).toLowerCase() == 's' && event.ctrlKey) && !(event.which == 19)) return true;
        validate_file_size_and_submit()
        event.preventDefault();
        return false;
      });
    }
    function show_file_explorer(){
      open_menu()
      open_explorer()
    }
    
    function remember_content(){
      content_saved = editor.getValue()
    }
    
    function check_content_changed(){
      if(editor.getValue() != content_saved){
        $('.editor_save_button').addClass('btn-warning')
      }
      else{
        $('.editor_save_button').removeClass('btn-warning')
      }
    }

</script>

<%= render 'shared/g_reauth'%>
<%= render 'select_theme_modal' %>
